{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Linigu Documentation for the Linigu package for SageMath. Purpose The goal of Linigu is to provide SageMath with the functionality to compute various zeta functions associated with hyperplane arrangements. Included are common constructions for hyperplane arrangements and specializations of the flag Hilbert\u2013Poincar\u00e9 series defined in Maglione\u2013Voll. Mathematical details are given in Maglione\u2013Voll. We outline the functions included in Linigu and provide example cases. Setup The simplest way to install Linigu is to run the following $ sage -pip install linigu Linigu has no external dependencies and is compatible with SageMath 9.2 . Importing Import LinIgu during your SageMath run with the following import linigu as li Throughout we use li for the reference name of linigu . Funding This package is funded in part by DFG grant 373111162 .","title":"Home"},{"location":"#linigu","text":"Documentation for the Linigu package for SageMath.","title":"Linigu"},{"location":"#purpose","text":"The goal of Linigu is to provide SageMath with the functionality to compute various zeta functions associated with hyperplane arrangements. Included are common constructions for hyperplane arrangements and specializations of the flag Hilbert\u2013Poincar\u00e9 series defined in Maglione\u2013Voll. Mathematical details are given in Maglione\u2013Voll. We outline the functions included in Linigu and provide example cases.","title":"Purpose"},{"location":"#setup","text":"The simplest way to install Linigu is to run the following $ sage -pip install linigu Linigu has no external dependencies and is compatible with SageMath 9.2 .","title":"Setup"},{"location":"#importing","text":"Import LinIgu during your SageMath run with the following import linigu as li Throughout we use li for the reference name of linigu .","title":"Importing"},{"location":"#funding","text":"This package is funded in part by DFG grant 373111162 .","title":"Funding"},{"location":"constructors/","text":"Constructors We provide a number of constructions of hyperplane arrangements. This uses the default hyperplane arrangement class in SageMath. There is some overlap with the default library , and one is encouraged to search there in case your favorite hyperplane arrangement is not in our list. Most of our constructions are Coxeter-theoretic---meaning, they take as input $\\mathsf{X}_n$, where $\\mathsf{X}$ is the Coxeter type and $n$ is the (Coxeter) rank. CatalanArrangement CoxeterArrangement Input: a string or an iterable container of strings. Output: the Coxeter arrangement associated with the strings. If just one string is provide, it should be formatted like 'Xn' , where X is a roman letter from $\\mathsf{A}$ to $\\mathsf{H}$ and n is a positive integer. Strings can be separated by one white space like 'Xm Yn' , and iterable containers of strings need to have strings formatted in this way. Example (Braid arrangement) The braid arrangement with $n+1$ hyperplanes is the type $\\mathsf{A}_n$ Coxeter arrangement: [ \\{X_i - X_j ~|~ 1\\leq i < j \\leq n+1\\}. ] We construct the braid arrangement with $3$ hyperplanes. sage: li.CoxeterArrangement(\"A2\") Arrangement <x1 - x2 | x0 - x1 | x0 - x2> Example (Boolean arrangement) The Boolean arrangement with $n$ hyperplanes is a Coxeter arrangement, isomorphic to $\\mathsf{A}_1^n$, the direct sum of $n$ copies of $\\mathsf{A}_1$. We construct the rank $5$ Boolean arrangement in two different ways. Note that, when created this way, the ambient dimension is double the rank. sage: bool5 = \"A1 A1 A1 A1 A1\" sage: li.CoxeterArrangement(bool5) Arrangement of 5 hyperplanes of dimension 10 and rank 5 Another construction is as follows. sage: L = [\"A1\" for i in range(5)] sage: L ['A1', 'A1', 'A1', 'A1', 'A1'] sage: li.CoxeterArrangement(L) Arrangement of 5 hyperplanes of dimension 10 and rank 5 Example (Coxeter type ${\\footnotesize \\mathsf{I}_2(m)}$) In all other Coxeter types, the integer corresponds to the rank. The exception is with type $\\mathsf{I}$. If the input is type $\\mathsf{I}$, then the integer corresponds to the number of hyperplanes. Here, we give a $\\mathbb{Q}$-representation of $\\mathsf{I}_2(m)$ as follows. sage: A = li.CoxeterArrangement(\"I8\") sage: A Arrangement of 8 hyperplanes of dimension 2 and rank 2 sage: A.hyperplanes() (Hyperplane -x0 + 2*x1 + 0, Hyperplane -x0 + 3*x1 + 0, Hyperplane 0*x0 + x1 + 0, Hyperplane x0 - x1 + 0, Hyperplane x0 + 0*x1 + 0, Hyperplane x0 + x1 + 0, Hyperplane x0 + 2*x1 + 0, Hyperplane x0 + 3*x1 + 0) DirectSum LinialArrangement PolynomialToArrangement ShiArrangement","title":"Constructors"},{"location":"constructors/#constructors","text":"We provide a number of constructions of hyperplane arrangements. This uses the default hyperplane arrangement class in SageMath. There is some overlap with the default library , and one is encouraged to search there in case your favorite hyperplane arrangement is not in our list. Most of our constructions are Coxeter-theoretic---meaning, they take as input $\\mathsf{X}_n$, where $\\mathsf{X}$ is the Coxeter type and $n$ is the (Coxeter) rank.","title":"Constructors"},{"location":"constructors/#catalanarrangement","text":"","title":"CatalanArrangement"},{"location":"constructors/#coxeterarrangement","text":"Input: a string or an iterable container of strings. Output: the Coxeter arrangement associated with the strings. If just one string is provide, it should be formatted like 'Xn' , where X is a roman letter from $\\mathsf{A}$ to $\\mathsf{H}$ and n is a positive integer. Strings can be separated by one white space like 'Xm Yn' , and iterable containers of strings need to have strings formatted in this way.","title":"CoxeterArrangement"},{"location":"constructors/#example-braid-arrangement","text":"The braid arrangement with $n+1$ hyperplanes is the type $\\mathsf{A}_n$ Coxeter arrangement: [ \\{X_i - X_j ~|~ 1\\leq i < j \\leq n+1\\}. ] We construct the braid arrangement with $3$ hyperplanes. sage: li.CoxeterArrangement(\"A2\") Arrangement <x1 - x2 | x0 - x1 | x0 - x2>","title":"Example (Braid arrangement)"},{"location":"constructors/#example-boolean-arrangement","text":"The Boolean arrangement with $n$ hyperplanes is a Coxeter arrangement, isomorphic to $\\mathsf{A}_1^n$, the direct sum of $n$ copies of $\\mathsf{A}_1$. We construct the rank $5$ Boolean arrangement in two different ways. Note that, when created this way, the ambient dimension is double the rank. sage: bool5 = \"A1 A1 A1 A1 A1\" sage: li.CoxeterArrangement(bool5) Arrangement of 5 hyperplanes of dimension 10 and rank 5 Another construction is as follows. sage: L = [\"A1\" for i in range(5)] sage: L ['A1', 'A1', 'A1', 'A1', 'A1'] sage: li.CoxeterArrangement(L) Arrangement of 5 hyperplanes of dimension 10 and rank 5","title":"Example (Boolean arrangement)"},{"location":"constructors/#example-coxeter-type-footnotesize-mathsfi_2m","text":"In all other Coxeter types, the integer corresponds to the rank. The exception is with type $\\mathsf{I}$. If the input is type $\\mathsf{I}$, then the integer corresponds to the number of hyperplanes. Here, we give a $\\mathbb{Q}$-representation of $\\mathsf{I}_2(m)$ as follows. sage: A = li.CoxeterArrangement(\"I8\") sage: A Arrangement of 8 hyperplanes of dimension 2 and rank 2 sage: A.hyperplanes() (Hyperplane -x0 + 2*x1 + 0, Hyperplane -x0 + 3*x1 + 0, Hyperplane 0*x0 + x1 + 0, Hyperplane x0 - x1 + 0, Hyperplane x0 + 0*x1 + 0, Hyperplane x0 + x1 + 0, Hyperplane x0 + 2*x1 + 0, Hyperplane x0 + 3*x1 + 0)","title":"Example (Coxeter type ${\\footnotesize \\mathsf{I}_2(m)}$)"},{"location":"constructors/#directsum","text":"","title":"DirectSum"},{"location":"constructors/#linialarrangement","text":"","title":"LinialArrangement"},{"location":"constructors/#polynomialtoarrangement","text":"","title":"PolynomialToArrangement"},{"location":"constructors/#shiarrangement","text":"","title":"ShiArrangement"},{"location":"generating-functions/","text":"Generating Functions AnalyticZetaFunction AtomZetaFunction CombinatorialSkeleton FlagHilbertPoincareSeries LocalIgusaZetaFunction","title":"Generating Functions"},{"location":"generating-functions/#generating-functions","text":"","title":"Generating Functions"},{"location":"generating-functions/#analyticzetafunction","text":"","title":"AnalyticZetaFunction"},{"location":"generating-functions/#atomzetafunction","text":"","title":"AtomZetaFunction"},{"location":"generating-functions/#combinatorialskeleton","text":"","title":"CombinatorialSkeleton"},{"location":"generating-functions/#flaghilbertpoincareseries","text":"","title":"FlagHilbertPoincareSeries"},{"location":"generating-functions/#localigusazetafunction","text":"","title":"LocalIgusaZetaFunction"},{"location":"lattices/","text":"Lattices LatticeOfFlats PoincarePolynomial","title":"Lattices"},{"location":"lattices/#lattices","text":"","title":"Lattices"},{"location":"lattices/#latticeofflats","text":"","title":"LatticeOfFlats"},{"location":"lattices/#poincarepolynomial","text":"","title":"PoincarePolynomial"}]}